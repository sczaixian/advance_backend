package tasks

/*作业目的
通过本作业深入理解以太坊参考实现 Go-Ethereum（Geth）的设计哲学，掌握区块链核心组件的实现原理

任务分解
理论分析（40%）
阐述Geth在以太坊生态中的定位
解析核心模块交互关系：
区块链同步协议（eth/62,eth/63）
交易池管理与Gas机制
EVM执行环境构建
共识算法实现（Ethash/POS）

架构设计（30%）
绘制分层架构图（需包含以下层级）：
[P2P网络层]->[区块链协议层]->[状态存储层]->[EVM执行层]
说明各层关键模块：
les（轻节点协议）
trie（默克尔树实现）
core/types（区块数据结构）

实践验证（30%）
编译并运行Geth节点
make geth
./build/bin/geth --dev --http
通过控制台验证功能：
eth.blockNumber // 查看区块高度
miner.start()   // 启动挖矿

作业要求
研究报告需包含：
功能架构图交易生命周期流程图
账户状态存储模型

实践报告需包含：
私有链搭建过程
智能合约部署截图
区块浏览器查询结果
作业要求
研究报告需包含：
功能架构图交易生命周期流程图
账户状态存储模型

实践报告需包含：
私有链搭建过程
智能合约部署截图
区块浏览器查询结果

参考资料
官方架构文档：https://geth.ethereum.org/docs
源码精读路线：
/go-ethereum
├── core      // 区块链核心逻辑
├── miner     // 挖矿模块
├── eth       // 以太坊协议实现
└── internal  // 底层工具包

评分标准：架构完整性40%、实现深度30%、实践完成度30%

该作业通过源码分析、模块调试和系统设计三个维度，培养区块链底层开发能力。需要特别注意P2P网络层的kademlia协议实现和状态数据库的MPT树结构。*/

/*Geth 是一个用 Go 编写的以太坊客户端。这意味着运行 Geth 会将计算机变成以太坊节点，将计算机连接到以太坊网络
 *每 12 秒随机选择一个节点生成一个新区块
交易的执行是在 Geth 的嵌入式计算机上完成的，该计算机称为以太坊虚拟机 (EVM)。

共识客户端处理所有使节点与以太坊网络保持同步的逻辑，接收区块（p2p），并运行分叉选择算法
没有验证者的共识客户端仅与链头保持同步，从而使节点保持同步

同步协议: 高效、安全、可靠 发现并获取它尚未拥有的区块和交易数据,最终使本地的区块链副本与网络共识状态保持一致

区块链： 由按顺序链接的区块组成，每个区块包含一批交易和一个区块头。
区块头： 包含关键元数据，如父区块哈希、状态根（State Root）、交易根（Tx Root）、收据根（Receipt Root）等。

*/
